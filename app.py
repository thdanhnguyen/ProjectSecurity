"""
Main Application File
·ª®ng d·ª•ng Flask ch√≠nh v·ªõi c√°c route v√† c·∫•u h√¨nh
"""
from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify
from functools import wraps
import os
from datetime import timedelta

from database import Database
from auth import AuthService
from email_service import EmailService
from utils import generate_otp, verify_otp_code

app = Flask(__name__)
app.secret_key = os.urandom(24)
app.config['SESSION_COOKIE_SECURE'] = True
app.config['SESSION_COOKIE_HTTPONLY'] = True
app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=30)

# Kh·ªüi t·∫°o services
db = Database()
auth_service = AuthService(db)
email_service = EmailService()

def login_required(f):
    """Decorator ƒë·ªÉ b·∫£o v·ªá c√°c route c·∫ßn ƒëƒÉng nh·∫≠p"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c', 'warning')
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

@app.route('/')
def index():
    """Trang ch·ªß"""
    if 'user_id' in session:
        return redirect(url_for('dashboard'))
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    """ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi"""
    if request.method == 'POST':
        username = request.form.get('username')
        email = request.form.get('email')
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')
        phone = request.form.get('phone', '')
        
        # Validation
        if not all([username, email, password, confirm_password]):
            flash('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin', 'error')
            return render_template('register.html')
        
        if password != confirm_password:
            flash('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp', 'error')
            return render_template('register.html')
        
        if len(password) < 8:
            flash('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±', 'error')
            return render_template('register.html')
        
        # ƒêƒÉng k√Ω user
        result = auth_service.register_user(username, email, password, phone)
        
        if result['success']:
            flash('ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p', 'success')
            return redirect(url_for('login'))
        else:
            flash(result['message'], 'error')
            return render_template('register.html')
    
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    """ƒêƒÉng nh·∫≠p - B∆∞·ªõc 1: X√°c th·ª±c m·∫≠t kh·∫©u"""
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        
        if not all([email, password]):
            flash('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin', 'error')
            return render_template('login.html')
        
        # X√°c th·ª±c m·∫≠t kh·∫©u
        result = auth_service.authenticate_user(email, password)
        
        if result['success']:
            user = result['user']
            
            # T·∫°o OTP v√† g·ª≠i email
            otp_code = generate_otp()
            auth_service.save_otp(user['id'], otp_code)
            
            # G·ª≠i OTP qua email
            email_sent = email_service.send_otp_email(user['email'], user['username'], otp_code)
            
            if email_sent:
                # L∆∞u th√¥ng tin t·∫°m v√†o session
                session['temp_user_id'] = user['id']
                session['temp_email'] = user['email']
                flash('OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n', 'info')
                return redirect(url_for('verify_otp'))
            else:
                flash('Kh√¥ng th·ªÉ g·ª≠i OTP. Vui l√≤ng th·ª≠ l·∫°i', 'error')
        else:
            flash(result['message'], 'error')
    
    return render_template('login.html')

@app.route('/verify-otp', methods=['GET', 'POST'])
def verify_otp():
    """ƒêƒÉng nh·∫≠p - B∆∞·ªõc 2: X√°c th·ª±c OTP"""
    if 'temp_user_id' not in session:
        flash('Phi√™n l√†m vi·ªác h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i', 'warning')
        return redirect(url_for('login'))
    
    if request.method == 'POST':
        otp_code = request.form.get('otp')
        user_id = session.get('temp_user_id')
        
        if not otp_code:
            flash('Vui l√≤ng nh·∫≠p m√£ OTP', 'error')
            return render_template('verify_otp.html')
        
        # X√°c th·ª±c OTP
        if auth_service.verify_otp(user_id, otp_code):
            # ƒêƒÉng nh·∫≠p th√†nh c√¥ng
            user = db.get_user_by_id(user_id)
            session.permanent = True
            session['user_id'] = user['id']
            session['username'] = user['username']
            session['email'] = user['email']
            
            # X√≥a th√¥ng tin t·∫°m
            session.pop('temp_user_id', None)
            session.pop('temp_email', None)
            
            # C·∫≠p nh·∫≠t last login
            auth_service.update_last_login(user_id)
            
            flash(f'Ch√†o m·ª´ng {user["username"]}!', 'success')
            return redirect(url_for('dashboard'))
        else:
            flash('M√£ OTP kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n', 'error')
    
    return render_template('verify_otp.html', email=session.get('temp_email'))

@app.route('/resend-otp', methods=['POST'])
def resend_otp():
    """G·ª≠i l·∫°i m√£ OTP"""
    if 'temp_user_id' not in session:
        return jsonify({'success': False, 'message': 'Phi√™n l√†m vi·ªác h·∫øt h·∫°n'})
    
    user_id = session.get('temp_user_id')
    user = db.get_user_by_id(user_id)
    
    # T·∫°o OTP m·ªõi
    otp_code = generate_otp()
    auth_service.save_otp(user_id, otp_code)
    
    # G·ª≠i email
    email_sent = email_service.send_otp_email(user['email'], user['username'], otp_code)
    
    if email_sent:
        return jsonify({'success': True, 'message': 'OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i'})
    else:
        return jsonify({'success': False, 'message': 'Kh√¥ng th·ªÉ g·ª≠i OTP'})

@app.route('/dashboard')
@login_required
def dashboard():
    """Trang dashboard sau khi ƒëƒÉng nh·∫≠p"""
    user = db.get_user_by_id(session['user_id'])
    return render_template('dashboard.html', user=user)

@app.route('/profile')
@login_required
def profile():
    """Trang th√¥ng tin c√° nh√¢n"""
    user = db.get_user_by_id(session['user_id'])
    return render_template('profile.html', user=user)

@app.route('/security')
@login_required
def security():
    """Trang c√†i ƒë·∫∑t b·∫£o m·∫≠t"""
    user = db.get_user_by_id(session['user_id'])
    return render_template('security.html', user=user)

@app.route('/change-password', methods=['POST'])
@login_required
def change_password():
    """ƒê·ªïi m·∫≠t kh·∫©u"""
    current_password = request.form.get('current_password')
    new_password = request.form.get('new_password')
    confirm_password = request.form.get('confirm_password')
    
    if not all([current_password, new_password, confirm_password]):
        flash('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin', 'error')
        return redirect(url_for('security'))
    
    if new_password != confirm_password:
        flash('M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp', 'error')
        return redirect(url_for('security'))
    
    if len(new_password) < 8:
        flash('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±', 'error')
        return redirect(url_for('security'))
    
    # ƒê·ªïi m·∫≠t kh·∫©u
    result = auth_service.change_password(session['user_id'], current_password, new_password)
    
    if result['success']:
        flash('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng', 'success')
    else:
        flash(result['message'], 'error')
    
    return redirect(url_for('security'))

@app.route('/logout')
@login_required
def logout():
    """ƒêƒÉng xu·∫•t"""
    username = session.get('username', 'User')
    session.clear()
    flash(f'T·∫°m bi·ªát {username}!', 'info')
    return redirect(url_for('index'))

@app.errorhandler(404)
def not_found(e):
    return render_template('404.html'), 404

@app.errorhandler(500)
def server_error(e):
    return render_template('500.html'), 500

if __name__ == '__main__':
    # Kh·ªüi t·∫°o database
    db.init_db()
    
    # Ch·∫°y app
    print("üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:5000")
    print("üìß C·∫•u h√¨nh email trong email_service.py ƒë·ªÉ g·ª≠i OTP")
    app.run(debug=True, host='0.0.0.0', port=5000)
